using System;
using System.Collections.Generic;
using System.Text;

namespace FastMem
{
	static public partial class Bytes
	{
		static public partial class Fixed
		{
<# 
	Start++;
	Stop = Math.Min(Stop, Max);
	var range = Stop > Start ? Stop - Start + 1 : 0;
	foreach (var i in Enumerable.Range(Start, range).Concat(Extras)) 
	{
		if (Breaks.Any(b => i > b.Point && i % b.Step != 0)) continue;
#>

			static <#= CopyVisibility(i) #> unsafe void Copy<#= Reverse ? "Reverse" : "" #><#= i #>(byte[] dst, byte[] src, int dstOffset = 0, int srcOffset = 0)
			{
				fixed (byte* pd = &dst[dstOffset])
				fixed (byte* ps = &src[srcOffset]) {
<#= CastFor(i, "pd", "ps", 5, reverse:Reverse) #>
				}
			}

<# } #>
		}
	}
}
